//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "token")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub key: String,
    pub created_at: DateTime,
    pub user_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// impl Entity {
//     pub async fn is_valid(key: &str, db: &DatabaseConnection) -> Result<bool, DbErr> {
//         let key = Self::find().filter(Column::Key.eq(key)).one(db).await?;

//         match key {
//             Some(k) => {
//                 let created_at_utc =
//                     ChroDateTime::<Utc>::from_naive_utc_and_offset(k.created_at, Utc);
//                 let age = Utc::now() - created_at_utc;
//                 Ok(age <= Duration::days(30))
//             }
//             None => Ok(false),
//         }
//     }
// }
